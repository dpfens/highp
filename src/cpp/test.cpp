#include "fuzzy.cpp"
#include "distance.cpp"

template <class T, class T2>
void print_map(std::map<T, T2> &data) {
    std::cout << "{";
    for (const auto &element : data) {
        std::cout << element.first << ": " << element.second << ", ";
    }
    std::cout << "}";
}

int main() {
    std::vector<std::vector<double> > data = {{931.0}, {931.0}, {932.0}, {932.0}, {932.0}, {932.0}, {932.0}, {932.0}, {933.0}, {933.0}, {933.0}, {933.0}, {933.0}, {933.0}, {933.0}, {933.0}, {933.0}, {934.0}, {934.0}, {934.0}, {934.0}, {934.0}, {934.0}, {934.0}, {934.0}, {934.0}, {934.0}, {935.0}, {935.0}, {935.0}, {935.0}, {935.0}, {936.0}, {936.0}, {936.0}, {936.0}, {936.0}, {936.0}, {937.0}, {938.0}, {938.0}, {938.0}, {938.0}, {938.0}, {939.0}, {939.0}, {939.0}, {939.0}, {939.0}, {940.0}, {940.0}, {940.0}, {940.0}, {941.0}, {941.0}, {941.0}, {942.0}, {942.0}, {942.0}, {943.0}, {944.0}, {944.0}, {945.0}, {945.0}, {945.0}, {945.0}, {946.0}, {946.0}, {947.0}, {947.0}, {947.0}, {948.0}, {948.0}, {948.0}, {949.0}, {949.0}, {949.0}, {949.0}, {949.0}, {950.0}, {950.0}, {950.0}, {950.0}, {951.0}, {951.0}, {952.0}, {953.0}, {953.0}, {955.0}, {955.0}, {965.0}, {966.0}, {966.0}, {966.0}, {966.0}, {967.0}, {968.0}, {968.0}, {968.0}, {968.0}, {969.0}, {969.0}, {970.0}, {970.0}, {970.0}, {971.0}, {971.0}, {972.0}, {972.0}, {972.0}, {973.0}, {973.0}, {974.0}, {980.0}, {980.0}, {981.0}, {981.0}, {981.0}, {982.0}, {983.0}, {983.0}, {983.0}, {983.0}, {984.0}, {984.0}, {994.0}, {994.0}, {996.0}, {1002.0}, {1007.0}, {1007.0}, {1007.0}, {1007.0}, {1008.0}, {1009.0}, {1009.0}, {1010.0}, {1028.0}, {1030.0}, {1061.0}, {1078.0}};
    std::vector<std::vector<double> > other_data = {{7344.0}, {7380.0}, {7392.0}, {7451.0}, {7466.0}, {7478.0}, {7493.0}, {7499.0}, {7499.0}, {7510.0}, {7543.0}, {7563.0}, {7569.0}, {7569.0}, {7580.0}, {7591.0}, {7609.0}, {7620.0}, {7623.0}, {7631.0}, {7638.0}, {7645.0}, {7663.0}, {7665.0}, {7667.0}, {7686.0}, {7691.0}, {7701.0}, {7701.0}, {7702.0}, {7735.0}, {7750.0}, {7755.0}, {7760.0}, {7777.0}, {7790.0}, {7796.0}, {7797.0}, {7805.0}, {7809.0}, {7811.0}, {7814.0}, {7819.0}, {7820.0}, {7821.0}, {7828.0}, {7833.0}, {7849.0}, {7853.0}, {7853.0}, {7862.0}, {7874.0}, {7877.0}, {7878.0}, {7880.0}, {7886.0}, {7891.0}, {7894.0}, {7896.0}, {7897.0}, {7899.0}, {7900.0}, {7904.0}, {7929.0}, {7945.0}, {7953.0}, {7958.0}, {7961.0}, {7963.0}, {7964.0}, {7970.0}, {7978.0}, {7998.0}, {7998.0}, {7999.0}, {8021.0}, {8021.0}, {8025.0}, {8033.0}, {8056.0}, {8062.0}, {8063.0}, {8070.0}, {8074.0}, {8110.0}, {8113.0}, {8118.0}, {8119.0}, {8125.0}, {8137.0}, {8151.0}, {8151.0}, {8152.0}, {8169.0}, {8192.0}, {8214.0}, {8237.0}, {8249.0}, {8268.0}, {8275.0}, {8278.0}, {8284.0}, {8285.0}, {8303.0}, {8304.0}, {8308.0}, {8322.0}, {8345.0}, {8352.0}, {8361.0}, {8365.0}, {8370.0}, {8380.0}, {8383.0}, {8394.0}, {8416.0}, {8445.0}, {8454.0}, {8457.0}, {8490.0}, {8506.0}, {8512.0}, {8520.0}, {8533.0}, {8540.0}, {8545.0}, {8563.0}, {8569.0}, {8590.0}, {8611.0}, {8810.0}, {8834.0}, {8850.0}, {8858.0}, {8882.0}, {8895.0}, {8896.0}, {8904.0}, {9148.0}, {9347.0}, {9419.0}};
    //long double epsilon = 5;
    //unsigned long int min_points = 2;
    //unsigned long int max_points = 4;
    //density::fuzzy::CoreDBSCAN<long double> clf = density::fuzzy::CoreDBSCAN<long double>(epsilon, min_points, max_points, euclidean);
    //std::vector<std::unordered_map<int, long double> > clusters = clf.predict(data);
    /*long double min_epsilon = 2.1;
    long double max_epsilon = 6;
    unsigned long int min_points = 1;
    density::fuzzy::BorderDBSCAN<long double> clf = density::fuzzy::BorderDBSCAN<long double>(min_epsilon, max_epsilon, min_points, euclidean);
    std::vector<std::unordered_map<int, long double> > clusters = clf.predict(other_data);
    for (auto i = clusters.begin(); i != clusters.end(); ++i) {
        size_t index = std::distance(clusters.begin(), i);
        std::cout << "Index: " << index << ", Point: " << other_data.at(index).at(0) << "    ";
        print_map(*i);
        std::cout << '\n';
    }*/

    long double min_epsilon = 1;
    long double max_epsilon = 8;
    unsigned long int min_points = 1;
    unsigned long int max_points = 3;
    density::fuzzy::DBSCAN<double> clf = density::fuzzy::DBSCAN<double>(min_epsilon, max_epsilon, min_points, max_points, distance::euclidean_distance<double>);
    std::vector<std::map<int, double> > clusters = clf.predict(other_data);
    for (auto i = clusters.begin(); i != clusters.end(); ++i) {
        size_t index = std::distance(clusters.begin(), i);
        std::cout << "Index: " << index << ", Point: " << other_data.at(index).at(0) << " - Memberships: ";
        print_map(*i);
        std::cout << '\n';
    }
}
